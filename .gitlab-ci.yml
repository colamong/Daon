# .gitlab-ci.yml — BE(도커) + FE(정적배포), deploy 브랜치 전용

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "deploy"'
    - when: never

stages: [build_be, deploy_be, build_fe, package_fe, deploy_fe]

default:
  interruptible: true
  tags: ["daon"]  # 모든 잡을 EC2 Shell 러너에서 실행

.ssh_setup: &ssh_setup
  - mkdir -p ~/.ssh
  - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

# ===== Backend =====

build-and-push-be:
  stage: build_be
  rules:
    - if: '$CI_COMMIT_BRANCH == "deploy"'
      changes:
        - BE/**/*
  before_script:
    - docker -v
  script:
    - echo "=== Docker Hub Login ==="
    - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
    - echo "=== Docker Build ==="
    - docker build -t "$IMAGE_NAME:latest" BE
    - echo "=== Docker Push ==="
    - docker push "$IMAGE_NAME:latest"

deploy-backend:
  stage: deploy_be
  needs: ["build-and-push-be"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "deploy"'
      changes:
        - BE/**/*
  script:
    - set -euxo pipefail
    - docker stop "$CONTAINER_NAME" || true
    - docker rm "$CONTAINER_NAME" || true
    - docker pull "$IMAGE_NAME:latest"
    - test -f "$ENV_FILE"
    - docker run -d --name "${CONTAINER_NAME}" --network daon-network --env-file "${ENV_FILE}" -p "${HOST_PORT}:${CONTAINER_PORT}" --restart=always "${IMAGE_NAME}:latest"

# ===== Frontend =====

# 기존 build-fe / package-fe 잡은 413의 원인이 되는 아티팩트 업로드가 있어 비활성화.
# (룰을 when: never로 바꿔 두고, 실제 배포는 deploy-frontend 한 잡에서 모두 처리)
build-fe:
  stage: build_fe
  rules:
    - when: never
  script:
    - echo "Skipping build-fe job (disabled)"

package-fe:
  stage: package_fe
  rules:
    - when: never
  script:
    - echo "Skipping package-fe job (disabled)"

deploy-frontend:
  stage: deploy_fe
  environment:
    name: production
    url: https://i13a706.p.ssafy.io
  rules:
    - if: '$CI_COMMIT_BRANCH == "deploy"'
      changes:
        - FE/my-vue-app/**/*
  before_script:
    - *ssh_setup
    - set -euxo pipefail
    - node -v
    - npm -v
    - cd FE/my-vue-app
  script:
    # 1) 로컬에서 빌드
    - npm ci
    - npm run build

    # 2) 릴리스 식별자/패키징
    - export RELEASE="${CI_PIPELINE_IID}-${CI_COMMIT_SHORT_SHA}"
    - tar -czf "dist-${RELEASE}.tar.gz" -C dist .

    # 3) 서버 대상 경로 계산
    - export TARGET="${SSH_TARGET_DIR}"
    - export RELEASE_DIR="${TARGET}/releases/${RELEASE}"

    # 4) 서버에 릴리스 폴더 생성 후, 패키지 업로드 & 해제
    - ssh ${SSH_USER}@${SSH_HOST} "mkdir -p '${RELEASE_DIR}'"
    - scp "dist-${RELEASE}.tar.gz" ${SSH_USER}@${SSH_HOST}:"${RELEASE_DIR}/"
    - ssh ${SSH_USER}@${SSH_HOST} "cd '${RELEASE_DIR}' && tar -xzf dist-${RELEASE}.tar.gz && rm dist-${RELEASE}.tar.gz"

    # 5) 심볼릭 링크 스위칭 (current → 새 릴리스)
    - ssh ${SSH_USER}@${SSH_HOST} "ln -sfn '${RELEASE_DIR}' '${TARGET}/current'"

    # 6) 퍼미션 정리(옵션) & Nginx 재로드
    - ssh ${SSH_USER}@${SSH_HOST} "sudo chown -R www-data:www-data '${TARGET}' || true"
    - ssh ${SSH_USER}@${SSH_HOST} "sudo nginx -t && sudo systemctl reload nginx"

  allow_failure: false
