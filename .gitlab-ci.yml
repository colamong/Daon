# .gitlab-ci.yml — BE(도커) + FE(정적배포), deploy 브랜치 전용

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "deploy"'
    - when: never

stages: [build_be, deploy_be, build_fe, package_fe, deploy_fe]

default:
  interruptible: true
  tags: ["daon"]  # 모든 잡을 EC2 Shell 러너에서 실행

.ssh_setup: &ssh_setup
  - mkdir -p ~/.ssh
  - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

# ===== Backend =====

build-and-push-be:
  stage: build_be
  rules:
    - if: '$CI_COMMIT_BRANCH == "deploy"'
      changes:
        - BE/**/*
  before_script:
    - docker -v
  script:
    - echo "=== Docker Hub Login ==="
    - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
    - echo "=== Docker Build ==="
    - docker build -t "$IMAGE_NAME:latest" BE
    - echo "=== Docker Push ==="
    - docker push "$IMAGE_NAME:latest"

deploy-backend:
  stage: deploy_be
  needs: ["build-and-push-be"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "deploy"'
      changes:
        - BE/**/*
  script:
    - set -euxo pipefail
    - docker stop "$CONTAINER_NAME" || true
    - docker rm "$CONTAINER_NAME" || true
    - docker pull "$IMAGE_NAME:latest"
    - test -f "$ENV_FILE"
    - docker run -d --name "${CONTAINER_NAME}" --env-file "${ENV_FILE}" -p "${HOST_PORT}:${CONTAINER_PORT}" "${IMAGE_NAME}:latest"

# ===== Frontend =====

build-fe:
  stage: build_fe
  rules:
    - if: '$CI_COMMIT_BRANCH == "deploy"'
      changes:
        - FE/my-vue-app/**/*
  before_script:
    # Node/NPM 버전 확인 (환경 점검용, 나중에 삭제 가능)
    - node -v
    - npm -v
  cache:
    key: fe-${CI_COMMIT_REF_SLUG}
    paths:
      - FE/my-vue-app/node_modules/
  script:
    - cd FE/my-vue-app
    - npm ci
    - npm run build
  artifacts:
    paths:
      - FE/my-vue-app/dist/
    expire_in: 1 week

package-fe:
  stage: package_fe
  needs: ["build-fe"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "deploy"'
      changes:
        - FE/my-vue-app/**/*
  before_script:
    - tar --version  # 우분투에는 tar 기본 포함
  script:
    - export RELEASE="${CI_PIPELINE_IID}-${CI_COMMIT_SHORT_SHA}"
    - tar -czf "dist-${RELEASE}.tar.gz" -C FE/my-vue-app/dist .
    - echo "${RELEASE}" > RELEASE.txt
  artifacts:
    paths:
      - dist-*.tar.gz
      - RELEASE.txt
    expire_in: 1 week

deploy-frontend:
  stage: deploy_fe
  needs: ["package-fe"]
  environment:
    name: production
    url: https://i13a706.p.ssafy.io
  rules:
    - if: '$CI_COMMIT_BRANCH == "deploy"'
      changes:
        - FE/my-vue-app/**/*
  before_script:
    - *ssh_setup
    - export RELEASE=$(cat RELEASE.txt)
    - export TARGET="${SSH_TARGET_DIR}"
    - export RELEASE_DIR="${TARGET}/releases/${RELEASE}"
  script:
    # 1) 서버에 릴리스 폴더 생성
    - ssh ${SSH_USER}@${SSH_HOST} "mkdir -p '${RELEASE_DIR}'"
    # 2) FE 아티팩트 업로드
    - scp dist-${RELEASE}.tar.gz ${SSH_USER}@${SSH_HOST}:"${RELEASE_DIR}/"
    # 3) 서버에서 압축 해제 및 원본 삭제
    - ssh ${SSH_USER}@${SSH_HOST} "cd '${RELEASE_DIR}' && tar -xzf dist-${RELEASE}.tar.gz && rm dist-${RELEASE}.tar.gz"
    # 4) current 심볼릭 링크 스위칭
    - ssh ${SSH_USER}@${SSH_HOST} "ln -sfn '${RELEASE_DIR}' '${TARGET}/current'"
    # 5) Nginx 검사 및 재시작
    - ssh ${SSH_USER}@${SSH_HOST} "sudo nginx -t && sudo systemctl reload nginx"
  when: manual
  allow_failure: false
